{"ts":1346184969468,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1346185056720,"patch":[[{"diffs":[[1,"require 'singleton'\n\nmodule SimpleNavigation\n\n  # Responsible for evaluating and handling the config/navigation.rb file.\n  class Configuration\n    include Singleton\n\n    attr_accessor :renderer, :selected_class, :active_leaf_class, :autogenerate_item_ids, :id_generator, :auto_highlight, :name_generator,\n                  :brand # additional bootstrap feature which can't be included as an item in the ul-list\n    attr_reader :primary_navigation\n\n    class << self\n\n      # Evals the config_file for the given navigation_context\n      def eval_config(navigation_context = :default)\n        SimpleNavigation.context_for_eval.instance_eval(SimpleNavigation.config_files[navigation_context])\n      end\n\n      # Starts processing the configuration\n      def run(&block)\n        block.call Configuration.instance\n      end\n\n    end #class << self\n\n    # Sets the config's default-settings\n    def initialize\n      @renderer = SimpleNavigation.default_renderer || SimpleNavigation::Renderer::List\n      @selected_class = 'selected'\n      @active_leaf_class = 'simple-navigation-active-leaf'\n      @autogenerate_item_ids = true\n      @id_generator = Proc.new {|id| id.to_s }\n      @name_generator = Proc.new {|name| name}\n      @auto_highlight = true\n      @brand = false\n    end\n\n    # This is the main method for specifying the navigation items. It can be used in two ways:\n    #\n    # 1. Declaratively specify your items in the config/navigation.rb file using a block. It then yields an SimpleNavigation::ItemContainer for adding navigation items.\n    # 1. Directly provide your items to the method (e.g. when loading your items from the database).\n    #\n    # ==== Example for block style (configuration file)\n    #   config.items do |primary|\n    #     primary.item :my_item, 'My item', my_item_path\n    #     ...\n    #   end\n    #\n    # ==== To consider when directly providing items\n    # items_provider should be:\n    # * a methodname (as symbol) that returns your items. The method needs to be available in the view (i.e. a helper method)\n    # * an object that responds to :items\n    # * an enumerable containing your items\n    # The items you specify have to fullfill certain requirements. See SimpleNavigation::ItemAdapter for more details.\n    #\n    def items(items_provider=nil, &block)\n      raise 'please specify either items_provider or block, but not both' if (items_provider && block) || (items_provider.nil? && block.nil?)\n      @primary_navigation = ItemContainer.new\n      if block\n        block.call @primary_navigation\n      else\n        @primary_navigation.items = SimpleNavigation::ItemsProvider.new(items_provider).items\n      end\n    end\n\n    # Returns true if the config_file has already been evaluated.\n    def loaded?\n      !@primary_navigation.nil?\n    end    \n        \n  end  \n  \nend\n"]],"start1":0,"start2":0,"length1":0,"length2":2811}]],"length":2811,"saved":false}
